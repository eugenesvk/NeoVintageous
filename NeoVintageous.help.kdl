/* See ‘NeoVintageous.help.kdl’ for an example
  (run ‘NeoVintageous: Open new config file example (KDL)’ in Command Palette)
  See  ‘NeoVintageous.keymap-default.kdl’ for a list of default keybinds
  (run ‘NeoVintageous: Dump default keymap as KDL’ in Command Palette to generate it)
  To reload run ‘NeoVintageous: Reload config"’ in Command Palette

  Install ‘KDL’ package for syntax highlighting
  // Comment /*block/inline comment*/  /-node comment to disable the whole section
  Node names are CaSe, ␠whitespace⭾, and _.separator- insensitive: keymap = key-map = key_map = "key map"
  (except for ‘keybind’ and ‘event’ where such characters matter for keys/cli commands)
*/
#v 0.1 // config format version to hopefully allow updates without breaking existing configs (‘#’ is optional)
#import (keybind)"NeoVintageous.key.kdl"
  /* import file name ↑ relative to this main config file (‘#’ is optional)
    group  ↑ values in ‘keybind{}’, so the file itself can include only top-level ‘key command’ lines
  */

keymap { // Use custom keymaps (non-QWERTY/non-Latin) in command mode
  // 1. add "lower"/"upper" keymaps below that match the position of QWERTY symbols
  // 2. Run command "NeoVintageous: Generate non-QWERTY key bindings"
  // (doesn't work for key combinations pending resolution of https://github.com/sublimehq/sublime_text/issues/5980)
  /-qwerty  	r#"`12 34567890-=\ qwertyuiop[] asdfghjkl;' zxcvbnm,./"#
  lower     	r#"ё12 34567890-=\ йцукенгшщзхъ фывапролджэ ячсмитьбю."#
  upper     	r#"Ё!@ #$%^&*()_+| ЙЦУКЕНГШЩЗХЪ ФЫВАПРОЛДЖЭ ЯЧСМИТЬБЮ?"#
  /-qwerty  	r#"~!@ #$%^&*()_+| QWERTYUIOP{} ASDFGHJKL:" ZXCVBNM<>?"#
  /-upper   	r#"Ё!\"№;%:?*()_+/ ЙЦУКЕНГШЩЗХЪ ФЫВАПРОЛДЖЭ ЯЧСМИТЬБЮ,"# // remap some symbols to same to avoid issues with losing them in regular latin keybinds like ; being remapped to $ since ⇧4 is translated to ; in Ru
  alias true	// 3. allows using `map й w` in .neovintageous to map non-latin keys separately from latin ones
  // assigns to each command an extra keybind in alt layout so that said key can be used in the TO sublime-keymap field
}
edit { // Edit behavior |default|
  move_left_on_insert_exit false	//|true| move cursor left on ⓘ→Ⓝ to be consistent with line-end editing vimhelp.org/vim_faq.txt.html#faq-10.2
}
event { /* Run cli commands on entering/leaving a mode by adding
  (mode)Event {(os)cmd "arg1" "arg2";}
  Mode 	: Normal Insert Replace Select Visual VisualBlock VisualLine (see ‘status’ for abbreviations)
  Event	: in enter     out exit leave
  OS   	: ⌘  🍏 m mac osx macos     🐧 l lin linux     🪟 🗔 ⊞ w win windows
  */              //↓ CaSe, ␠whitespace⭾, and _.separator- sensitive
  (ⓘ)in   	{(mac)"~/.local/bin/karabiner_cli" "--set-variables" r#"{"isNVⓘ":1}"#;}
  (ⓘ)out  	{(mac)"~/.local/bin/karabiner_cli" "--set-variables" r#"{"isNVⓘ":0}"#;}
  /-(n)in 	{(mac)"~/.local/bin/karabiner_cli" "--set-variables" r#"{"isNVⓃ":1}"#;}
  /-(n)out	{(mac)"~/.local/bin/karabiner_cli" "--set-variables" r#"{"isNVⓃ":0}"#;}
}
status { // Set values/reorder the status bar mode indicator, indicator format is '<prefix><Mode><suffix>', where Mode's name can be either of the space-separated values:
  /*normal     	Ⓝ N
    insert     	ⓘ I
    command    	Ⓒ C
    visual     	Ⓥ V
    visualblock	▋ VB
    visualline 	━ VL
    select     	Ⓢ S
    operator   	Ⓞ O
    terminal   	Ⓣ T
    replace    	Ⓡ R
    Ⓜ M        	 map
               	 map!
    Ⓛ L        	//
    Ⓧ X        	//
  so ‘insert "ⓘ"’ would set Insert's mode indicator to ⓘ, but so would ‘I "ⓘ"’
  */
  prefix 	""; suffix ""
  insert 	"ⓘ"
  normal 	" "         	// space roughly the width of an indicator to avoid jitter on mode change
  id_mode	"00_nv_mode"	// '00_mode' number defines order priority of custom status bar statuses, so 00 should be left-most
  id_seq 	"vim-seq"
}; /-status insert="ⓘ" // prop=val format also works
indicator { // Set various indicator format
  ls { // Set values for ‘ls’ command indicators |default|
    current    	"•"	//|%|        	The buffer in the current window
    modified   	"🖉"	//|+|        	Modified buffer
    read_only  	"👓"	//|=|        	Readonly buffer
    active     	"👁"	//|a|        	Active   buffer: loaded and visible
    hidden     	" "	//|h|        	Hidden   buffer: loaded but invisible
    line       	"━"	//|line |    	Line prefix
    no_name    	"" 	//|[NO NAME]|	Name for a tab without a file
    file_qleft 	"" 	//|"|        	File name left  quote
    file_qright	"" 	//|"|        	File name right quote
  }; /-ls current="•" // prop=val format also works
  registers { // Set values for ‘registers’ command indicators
    char	"c"	// Characterwise text
    line	"━"	// Linewise      text
  }; /-registers char="c" line="━━" // prop=val format also works
}
plugin {
  surround { // Use custom brackets in Surround plugin
    punctuation_marks\/* add to default (){}[]<>*/
      ‘="‘’" “="“”" ’="‘’" ”="“”" \
      ‹="‹›" «="«»" ›="‹›" »="«»" \
      〈="〈〉"   ⟪="⟪⟫" 〉="〈〉"   ⟫="⟪⟫" \
      `'="`' '"\/*use space as a separator of the left vs right groups*/
      〔="〔〕" 〕="〔〕"\
      ⸨="⸨⸩" ⸩="⸨⸩"\
      【="【】" 】="【】"\
      「="「」" 」="「」"\
      ␌="␌␌"; /-punctuation_marks {‘ "‘’"; “ "“”";} //key val child node format also works
    punctuation-alias "clear"/*clear defaults b) B} r] a>*/\
      d="(" f="[" g="‘" h="“"\
      j="{" k="\"" l="'"\
      r="‹" t="«" y="`'" o="〔" p="␌"\
      z="⸨" n="【" m="「" " "="〈" .="⟪"; /-punctuation_alias {clear; d "(";} //key val child node format also works
    "append space to chars" ")}]" // "({["
    steady_cursor add=true delete=true replace=true // don't 'move' ⎀cursor to the changed punctuation:
      // surround-word add of ‘(’ in  ‘text_⎀surr’  results in ‘(text_⎀surr)’
        //                                                not ‘⎀(text_surr)’
      // surround   delete of ‘(’ in ‘(text_⎀surr)’ results in  ‘text_⎀surr’
        //                                                 not ‘⎀text_surr’
      // surround  replace of ‘(’ in ‘(text_⎀surr)’ results in  ‘[text_⎀surr]’
        //               with ‘[’                          not ‘⎀[text_surr]’
    /-steady_cursor {add true; replace true; delete true;} //key val child node format also works
    seek_forward false /* When looking for brackets, if the current text is NOT enclosed in them, but Targets plugin is enabled, seek the next pair of brackets, for example (⎀ is cursor position):
        ⎀a(b)  with surround delete of ( will result in:
        ⎀ab       if SEEK_FORWARD is true : the next pair of () after ⎀ found and deleted
        ⎀a(b)     if SEEK_FORWARD is false: the next pair of () is ignored
      */
  }
}
