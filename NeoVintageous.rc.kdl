/*Autogenerated user ‘NeoVintageous’ config in KDL (from .neovintageousrc as is line-by-line) via ‘nv_old_cfg_kdl’ command, changes will be overwritten
 - r#"" ...   preserves commented lines with nodes named -
 (mode)Key "CommandName"   where mode is an abbreviated name or icon from:
┌────────┬─┬─┬─┬V┬V┬V┬─┬─┬─┬─┐
│   Mode→│N│I│C│V│L│B│S│O│T│L│
├↓Cmd────┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤↓Icon
│  map   │•│ │ │•│•│•│•│•│ │ │Ⓜ
│  map!  │ │•│•│ │ │ │ │ │ │ │Ⓜ!
│v map   │ │ │ │•│•│•│•│ │ │ │Ⓥ
│x map   │ │ │ │•│•│•│ │ │ │ │Ⓧ
│l map   │ │•│•│ │ │ │ │ │ │•│none
│n map   │•│ │ │ │ │ │ │ │ │ │Ⓝ
│i map   │ │•│ │ │ │ │ │ │ │ │ⓘ
│c map   │ │ │•│ │ │ │ │ │ │ │Ⓒ
│        │ │ │ │•│ │ │ │ │ │ │ⓋⓋ
│        │ │ │ │ │•│ │ │ │ │ │━
│        │ │ │ │ │ │•│ │ │ │ │▋
│s map   │ │ │ │ │ │ │•│ │ │ │Ⓢ
│o map   │ │ │ │ │ │ │ │•│ │ │Ⓞ
│t map   │ │ │ │ │ │ │ │ │•│ │Ⓣ
│        │ │ │ │ │ │ │ │ │ │•│Ⓛ
└────────┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
Normal Insert Command-line Visual Visual-Linewise Visual-Blockwise Select Operator-pending Terminal-Job Lang-Arg
*/
- r#"" Option           	      Opt	|Default|                 	Comment"#
set winaltkeys="no"
- r#"" :set autoindent"#
- r#"" :set belloff"#
- r#"" :set equalalways"#
- r#"" :set hlsearch"#
- r#"" :set ignorecase"#
- r#"" :set smartcase"#
- r#"" :set incsearch"#
- r#"" :set magic"#
- r#"" :set menu"#
- r#"" :set minimap"#
- r#"" :set modeline"#
- r#"" :set modelines"#
- r#"" :set shell"#
- r#"" :set sidebar"#
- r#"" :set statusbar"#
- r#"" :set wrapscan"#
- r#"" Sublime Settings 	         	                          	""#
set relativenumber=null
- r#"" :set expandtab"#
- r#"" :set list"#
- r#"" :set number"#
- r#"" :set scrolloff"#
- r#"" :set spell"#
- r#"" :set tabstop"#
- r#"" :set textwidth"#
- r#"" :set wrap"#
- r""
- r""
- r#"" ⓘ Insert mode ——————————————————————————————————————————————————————————————————————"#
- r#"" Can't be remapped, use this temporarily"#
(Ⓝ)"<M-I>" r#":"command":"swap_line_down"<CR>"#
(Ⓝ)"<M-O>" r#":"command":"swap_line_up"<CR>"#
- r""
- r#""Ⓝ Test ——————————————————————————————————————————————————————————————————————"#
(Ⓝ)а "MoveByWordEnds" defk="e"
(Ⓝ)в "MoveByWordsBackward" defk="b"
- r#"" noremap Д w"#
- r#"" noremap й     	 w"#
- r#"" noremap ц     	 w"#
- r#"" noremap у     	 w"#
- r#"" noremap к     	 w"#
- r#"" noremap е     	 w"#
- r#"" noremap н     	 w"#
- r#"" noremap ф     	 w"#
- r#"" noremap ы     	 w"#
- r#"" noremap в     	 w"#
- r#"" noremap а     	 w"#
- r#"" noremap п     	 w"#
- r#"" " noremap й   	 q"#
- r#"" noremap <f1>  	 w"#
- r#"" noremap <f2>  	 w"#
- r#"" noremap <f3>  	 b"#
- r#"" noremap <f4>  	 e"#
- r#"" noremap <f5>  	 e"#
- r#"" noremap <S-f6>	 b"#
- r#"" noremap <S-f7>	 w"#
- r#"" noremap <f6>  	 b"#
- r#"" noremap <f7>  	 w"#
- r#"" " noremap <⇟> b"#
- r""
(Ⓝ)"<bslash>d" ":Neovintageous action=toggle_side_bar<CR>"
- r#"" nnoremap gg     	:Neovintageous action=toggle_side_bar<CR>"#
- r#"" nnoremap t r    	2  replace N chars with {char}"#
- r""
- r#"" nnoremap <C-q>	:quit!"#
- r#"" nnoremap G    	move_prev_word_end"#
- r#"" nnoremap 0    	univeral_arg"#
- r#"" 'C-j'     	= ['page_down','align_view_center']	# ⇟ Move      page down"#
- r#"" 'C-k'     	= ['page_up','align_view_center']  	# ⇞ Move      page up"#
- r""
- r#"" 'C-K'	= "insert_char"	# ⇞ Move      page up"#
- r""
- r#""Ⓝ Free ——————————————————————————————————————————————————————————————————————"#
- r#"  "nnoremap <C-u>	no_op"#
- r#"  "nnoremap <A-C>	no_op"#
- r#"  "nnoremap A-(  	no_op"#
- r#"  "nnoremap A-)  	no_op"#
- r#"  "nnoremap <A-K>	no_op"#
- r#"  "nnoremap <C-i>	no_op"#
- r#"  "nnoremap b    	no_op"#
- r#""    '~'     	= "no_op"       	#"#
- r#""    'A-`'   	= "no_op"       	#"#
- r#"" nnoremap X     	change_selection"#
- r#""Ⓝ Major modes ——————————————————————————————————————————————————————————————————————"#
- r#"" nnoremap i	insert_mode"#
- r#"" nnoremap e	select_mode"#
- r#""Ⓝ Minor modes / menu dialogs ———————————————————————————————————————————————————————"#
- r#""p    	  	 ☰👁 View mode            	Ⓝ"#
- r#""P    	  	 ☰👁ₛ 'sticky', persistent	Ⓝ"#
- r#""Z    	  	 ☰👁ₛ 'sticky', persistent	Ⓝ"#
- r#""g    	  	 ⓖ☰⮊ Goto mode           	  Ⓝ"#
- r#""⎇d   	gh	 ☰Multicursor (@select)  	Ⓝ"#
- r#""n    	  	 ☰🧩  Match mode          	Ⓝ ☰<i class='fa fa-puzzle-piece'></i>"#
- r#""C-w  	  	 ☰🗔  Window mode         	  Ⓝ"#
- r#""space	  	 ☰␠  Space mode          	  Ⓝ"#
- r#""[    	  	 ☰⧛ Unimpaired           	  Ⓝ"#
- r#""]    	  	 ☰⧚                      	  Ⓝ"#
- r#""`    	  	 ☰𝔸𝕒 Case conversion     	  Ⓝ"#
- r""
(Ⓝ): "EnterCommandLineMode" defk=":" defc="EnterCommandLineMode"
(Ⓝ)R r#":"command":"show_overlay","args":{"overlay":"command_palette"}<CR>"# defc="EnterReplaceMode"
- r""
- r#""nnoremap g	:"command":"show_overlay","args":{"overlay":"goto","text":"@"}<CR>"#
- r""
- r#"  "Ⓝ              	Compat with non-modal editors"#
- r#"  " nnoremap <C-o>    	file_picker"#
- r#"  " nnoremap <C-O>    	file_picker_in_current_directory"#
- r#"  " nnoremap <C-s>    	commit_undo_checkpoint :write   	# 💾 save file"#
- r#"  " nnoremap C-S-s    	Save As"#
- r#"  " nnoremap <C-n>    	:new"#
- r#"  " nnoremap C-S-t    	open-last-closed"#
- r#"  " nnoremap C-+      	zoom-in"#
- r#"  " nnoremap <C-minus>	zoom-out"#
- r""
- r#"  "Ⓝ       	Copy"#
(Ⓝ)c "YankByChars" defk="y" defc="ChangeByChars"
- r#""nnoremap <C-c>	??"#
- r#""nnoremap C    	??"#
- r#""nnoremap <A-c>	??"#
- r""
- r#"  "Ⓝ Shell"#
- r#"" nnoremap |  	shell_pipe"#
- r#""A-\\"    	= 'shell_pipe_to'"#
- r#"" nnoremap A-|	shell_pipe_to"#
- r""
- r#"  "Ⓝ Move ——————————————————————————————————————————————————————————————————————"#
- r#"" Cursor@H"#
(Ⓝ)j "MoveByScreenLineDown" defk="gj" defc="MoveDownByLines"
(Ⓝ)k "MoveByScreenLineUp" defk="gk" defc="MoveUpByLines"
(Ⓝ)l "MoveLeftByChars" defk="h" defc="MoveRightByChars"
(Ⓝ)";" "MoveRightByChars" defk="l" defc="RepeatCharSearchForward"
(Ⓝ)m "MoveHalfScreenDown" defk="<C-d>" defc="SetMark"
(Ⓝ)"," "MoveHalfScreenUp" defk="<C-u>" defc="RepeatCharSearchBackward"
(Ⓝ)"<C-j>" "MoveScreenDown" defk="<C-f>" defc="MoveDownByLines"
(Ⓝ)"<C-k>" "MoveScreenUp" defk="<C-b>" defc="OpenNameSpace"
- r#"" nnoremap	a    	0"#
- r#"" nnoremap	A    	$"#
(Ⓝ)a r#":"command":"move_to","args":{"to":"bol","extend":false}<CR>"# defc="InsertAfterChar"
(Ⓝ)A r#":"command":"move_to","args":{"to":"eol","extend":false}<CR>"# defc="InsertAtEol"
- r#"" ⎈e  	     	scroll Up   N lines (Extra) bug https://github.com/NeoVintageous/NeoVintageous/issues/866"#
- r""
- r#""nnoremap g	:"command":"show_overlay","args":{"overlay":"goto","text":"@"}<CR>"#
- r""
- r#""Ⓝ               	Compat with non-modal editors"#
(Ⓝ)"<C-home>" "GotoBof" defk="gg" defc="GotoBof"
(Ⓝ)"<C-end>" "GotoEof" defk="G"
- r#""nnoremap <D-Home>   	gg"#
- r#""nnoremap <D-End>    	G"#
(Ⓝ)"<D-up>" "GotoBof" defk="gg"
(Ⓝ)"<D-down>" "GotoEof" defk="G"
(Ⓝ)"<D-1>" "ActivatePreviousTab" defk="gT"
(Ⓝ)"<D-2>" "ActivateNextTab" defk="gt"
(Ⓝ)"<C-S-tab>" "ActivatePreviousTab" defk="gT"
(Ⓝ)"<C-tab>" "ActivateNextTab" defk="gt"
(Ⓝ)"<C-pageup>" "ActivatePreviousTab" defk="gT" defc="ActivatePreviousTab"
(Ⓝ)"<C-pagedown>" "ActivateNextTab" defk="gt" defc="ActivateNextTab"
(Ⓝ)"<M-pageup>" "JumpBack" defk="<C-o>"
(Ⓝ)"<M-pagedown>" "<Tab>"
(Ⓝ)"<C-j>" "JumpBack" defk="<C-o>" defc="MoveDownByLines"
(Ⓝ)"<C-;>" "<Tab>"
- r""
(Ⓝ)"1" "ActivatePreviousTab" defk="gT"
(Ⓝ)"<M-1>" "ActivatePreviousTab" defk="gT"
(Ⓝ)"2" "ActivateNextTab" defk="gt"
(Ⓝ)"<M-2>" "ActivateNextTab" defk="gt"
(Ⓝ)"3" "JumpBack" defk="<C-o>"
(Ⓝ)"<M-3>" "JumpBack" defk="<C-o>"
(Ⓝ)"<S-tab>" "JumpBack" defk="<C-o>"
(Ⓝ)"4" "<Tab>"
(Ⓝ)"<M-4>" "<Tab>"
- r#""nnoremap <Tab> 	<Tab>"#
- r""
- r""
- r#""Ⓝ word !!! sometimes prev≠next by a space"#
(Ⓝ)f "MoveByWordEnds" defk="e" defc="SearchCharForward"
(Ⓝ)"<M-f>" "MoveByWords" defk="w"
(Ⓝ)"<M-right>" "MoveByWords" defk="w" defc="MoveRightByChars"
(Ⓝ)d "MoveByWordsBackward" defk="b" defc="DeleteByChars"
(Ⓝ)"<M-d>" "MoveByWordEndsBackward" defk="ge"
(Ⓝ)"<M-left>" "MoveByWordEndsBackward" defk="ge" defc="MoveLeftByChars"
(Ⓝ)F "MoveByBigWordEnds" defk="E" defc="SearchCharBackward"
(Ⓝ)"<M-F>" "MoveByBigWords" defk="W"
(Ⓝ)D "MoveByBigWordsBackward" defk="B" defc="DeleteToEol"
(Ⓝ)"<M-D>" "MoveByBigWordEndsBackward" defk="gE"
(Ⓝ)"<C-f>" "MoveByBigWordEnds" defk="E" defc="MoveScreenDown"
(Ⓝ)"<C-d>" "MoveByBigWordEndsBackward" defk="gE" defc="MoveHalfScreenDown"
(Ⓝ)"<C-right>" "MoveByBigWords" defk="W" defc="MoveByBigWords"
(Ⓝ)"<C-left>" "MoveByBigWordsBackward" defk="B" defc="MoveByBigWordsBackward"
- r#""nnoremap G       	gg"#
- r""
- r#""Ⓝ         	Line"#
(Ⓝ)"<home>" "MoveToHardBol" defk="0" defc="MoveToBol"
(Ⓝ)"<end>" "MoveToEol" defk="$" defc="MoveToEol"
- r""
- r#""Ⓝ    	Block"#
(Ⓝ)">" "MoveByBlockUp" defk="{" defc="Indent"
(Ⓝ)? "MoveByBlockDown" defk="}" defc="SearchBackward"
- r""
- r#""Ⓝ         	Marked"#
- r#""nnoremap <A-g>	jumplist_picker"#
(Ⓝ)"<M-g>" "GotoExactMarkXpos" defk="`"
- r""
(Ⓝ)r "RepeatCharSearchForward" defk=";" defc="ReplaceCharacters"
(Ⓝ)"<M-R>" "RepeatCharSearchBackward" defk=","
- r""
- r#""Ⓝ        	Find"#
(Ⓝ)"<M-w>" "SearchCharForwardTill" defk="t"
(Ⓝ)w "SearchCharForward" defk="f" defc="MoveByWords"
(Ⓝ)"<M-W>" "SearchCharBackwardTill" defk="T"
(Ⓝ)W "SearchCharBackward" defk="F" defc="MoveByBigWords"
(Ⓝ)S "SearchBackward" defk="?" defc="SubstituteByLines"
(Ⓝ)s "SearchForward" defk="/" defc="SubstituteChar"
(Ⓝ). "?<CR>" defc="Repeat"
(Ⓝ)"/" "/<CR>" defc="SearchForward"
- r#"" nnoremap 8  	search_selection"#
- r#"" nnoremap *  	search_selection"#
(Ⓝ)"8" "FindWord" defk="*"
(Ⓝ)* "ReverseFindWord" defk="#" defc="FindWord"
- r""
- r#"  "Ⓝ Select ——————————————————————————————————————————————————————————————————————"#
(Ⓝ)e "EnterVisualMode" defk="v" defc="MoveByWordEnds"
- r""
- r#""Ⓝ            	Compat with non-modal editors"#
- r#""    'C-a'    	= ['save_selection','select_all']                     	# 🖈∀▋"#
(Ⓝ)"<M-down>" r#":"command":"select_lines","args":{"forward":true }<CR>"#
(Ⓝ)"<M-up>" r#":"command":"select_lines","args":{"forward":false}<CR>"#
(Ⓝ)"<S-down>" "vj" defc="MoveScreenDown"
(Ⓝ)"<S-up>" "vk" defc="MoveScreenUp"
(Ⓝ)"<S-left>" "vh" defc="MoveByWordsBackward"
(Ⓝ)"<S-right>" "vl" defc="MoveByWords"
- r""
- r#""Ⓝ             	Mark jump points"#
(Ⓝ)G "SetMark" defk="m" defc="GotoEof"
(Ⓝ)"<C-g>" "SetMark" defk="m" defc="ShowFileStatus"
(Ⓝ)"<M-g><M-g>" "GotoExactMarkXpos" defk="`"
(Ⓝ)"<M-g><M-x>" ":delmarks!"
(Ⓝ)"<M-g><M-h>" ":delmarks"
- r""
(Ⓝ)J "EnterVisualLineMode" defk="V" defc="JoinLines"
- r#""nnoremap <A-r>	extend_line"#
(Ⓝ)E "EnterVisualLineMode" defk="V" defc="MoveByBigWordEnds"
(Ⓝ)"<M-e>" "FindWord" defk="*"
(Ⓝ)"<M-E>" "ReverseFindWord" defk="#"
(Ⓝ)"5" "vip"
(Ⓝ)% ":%y<CR>" defc="Percent"
- r""
- r#"" ↓×2 mapped in Karabiner to l⎇ to work in both modes and not interfere with insert symbols mapped to those keys"#
- r#"" !!!todo: rebind to l⎇ when Sublime supports side modifiers"#
(Ⓝ)"<M-j>" r#":"command":"select_lines"  ,"args":{"forward":true }<CR>"#
(Ⓝ)"<M-k>" r#":"command":"select_lines"  ,"args":{"forward":false}<CR>"#
(Ⓝ)"<M-J>" r#":"command":"deselect_lines","args":{"forward":true }<CR>"#
(Ⓝ)"<M-K>" r#":"command":"deselect_lines","args":{"forward":false}<CR>"#
- r#""nnoremap <A-l>	select_prev_sibling"#
- r#""nnoremap A-;  	select_next_sibling"#
- r#""nnoremap M    	shrink_selection"#
- r#""nnoremap <    	expand_selection"#
- r#""nnoremap <A-s>	select_regex"#
- r#""nnoremap N    	split_selection"#
- r#""nnoremap <A-n>	split_selection_on_newline"#
- r""
- r#"  "nnoremap "'"   	collapse_selection"#
- r#"  "nnoremap <A-'> 	flip_selections"#
- r#"  "nnoremap <A-a> 	flip_selections"#
- r#"  "nnoremap <A-A> 	flip_selections"#
- r#"  "nnoremap <A-p> 	ensure_selections_forward"#
- r#"  "nnoremap <A-:> 	ensure_selections_forward"#
- r#"  ""nnoremap <A-l>	rotate_selections_backward"#
- r#"  ""nnoremap <A-;>	rotate_selections_forward"#
- r#"  "nnoremap <A-m> 	rotate_selections_forward"#
- r#"  "nnoremap A-,   	rotate_selections_backward"#
- r#"  "nnoremap <A-u> 	remove_primary_selection"#
(Ⓝ)"<M-i>" r#":"command":"deselect_lines_to_first"<CR>"#
(Ⓝ)"<M-o>" r#":"command":"deselect_lines_to_last"<CR>"#
(Ⓝ)"<M-U>" r#":"command":"soft_undo"<CR>"#
- r#"  "nnoremap K     	keep_selections"#
- r#"  "nnoremap L     	remove_selections"#
- r#"  "nnoremap <A-Z> 	:"command":"deselect_lines_to_first"<CR>"#
- r#"  "      ,    	  'collapse_selection']                 	                                                      		#"#
- r""
- r#"  "nnoremap minus	trim_selections"#
- r#"  "nnoremap _    	merge_consecutive_selections"#
- r#"  "nnoremap +    	dupe_selections"#
- r""
- r#"  "Ⓝ Change ——————————————————————————————————————————————————————————————————————"#
- r#"  "                  	Compat with non-modal editors"#
- r#"  "nnoremap <A-del>      	delete_word_forward"#
- r#"  "    'C-del'       	= ['extend_next_long_word_end',  	# ⌦W"#
- r#"  "                  	   'delete_selection']           	# ᵡ Word →"#
- r#"  "nnoremap <A-backspace>	delete_word_backward"#
- r#"  "    'C-backspace' 	= ['extend_prev_long_word_start',	# ⌫W"#
- r#"  "                  	   'delete_selection']           	# ᵡ Word ←"#
- r#"  "nnoremap del          	delete_selection"#
- r#"  "nnoremap <S-del>      	delete_selection_noyank"#
(Ⓝ)"<cr>" "o<Esc>" defc="MotionEnter"
(Ⓝ)"<S-cr>" "O<Esc>" defc="ShiftEnterMotion"
(Ⓝ)"<C-y>" "Redo" defk="<C-r>" defc="ScrollByLinesUp"
(Ⓝ)"<C-z>" "Undo" defk="u"
(Ⓝ)"<C-Z>" "Redo" defk="<C-r>"
- r""
(Ⓝ)"<C-/>" r#":"command":"toggle_comment","args":{"block":false}<CR>"#
- r""
- r""
- r#"  "nnoremap <C-ret>	:reflow"#
- r""
- r""
- r#"  "nnoremap .    	N/A"#
- r#"  "nnoremap 6    	delete_char_forward"#
(Ⓝ)x "DeleteByChars" defk="d" defc="RightDeleteChars"
- r#"  "nnoremap <A-x>	delete_selection_noyank"#
- r#"  "nnoremap <A-c>	change_selection"#
(Ⓝ)h "LeftDeleteChar" defk="X" defc="MoveLeftByChars"
(Ⓝ)"<bs>" "LeftDeleteChar" defk="X" defc="MoveLeftByChars"
(Ⓝ)"<C-h>" "LeftDeleteChar" defk="X" defc="MoveLeftByChars"
(Ⓝ)H "RightDeleteChars" defk="<del>" defc="GotoScreenTop"
- r#""nnoremap del    	delete_char_forward"#
- r#""nnoremap <C-d>  	delete_char_forward"#
- r#"  "nnoremap <A-h>	delete_word_backward"#
- r#"  "nnoremap <A-H>	delete_word_forward"#
- r#""    'C-h'   	= ['move_prev_long_word_start',      	# ⌫W"#
- r#""            	   'delete_selection']               	# ᵡ Word ←"#
- r#""    'C-x'   	= ['yank_main_selection_to_clipboard'	                                  	,"#
- r#""            	   'delete_selection']               	#                                 		×📋 cut to clipboard <i class='fa fa-clipboard'></i>"#
- r#"  "nnoremap X    	join_selections"#
- r#"  "nnoremap <A-X>	join_selections_space"#
- r""
(Ⓝ)t "ReplaceCharacters" defk="r" defc="SearchCharForwardTill"
- r#"  "nnoremap T    	replace_with_yanked"#
- r#"  "nnoremap <A-t>	replace_selections_with_clipboard"#
- r""
- r#"  "nnoremap `"#
(Ⓝ)B "guiw" defc="MoveByBigWordsBackward"
(Ⓝ)"<C-b>" "cru" defc="MoveScreenUp"
- r""
- r#"  " Ⓝ     	line"#
(Ⓝ)"<C-J>" r#":"command":"swap_line_down"<CR>"#
(Ⓝ)"<C-K>" r#":"command":"swap_line_up"<CR>"#
- r""
- r#"  "nnoremap A-.	unindent"#
- r#"  "nnoremap A-/	indent"#
- r""
- r#"  "nnoremap q	record_macro"#
- r#"  "nnoremap Q	replay_macro"#
- r#"  "nnoremap "	select_register"#
- r""
(Ⓝ)b "Repeat" defk="." defc="MoveByWordsBackward"
(Ⓝ)"<M-B>" "RepeatCharSearchBackward" defk=","
(Ⓝ)i "EnterInsertMode" defk="i" defc="EnterInsertMode"
(Ⓝ)o "InsertAfterChar" defk="a" defc="InsertLineAfter"
(Ⓝ)O "InsertLineAfter" defk="o" defc="InsertLineBefore"
(Ⓝ)I "InsertLineBefore" defk="O" defc="InsertAtBol"
(Ⓝ)u "Undo" defk="u" defc="Undo"
(Ⓝ)y "Redo" defk="<C-r>" defc="YankByChars"
- r#"  "nnoremap U    	earlier"#
- r#"  "nnoremap Y    	later"#
(Ⓝ)v "PasteAfter" defk="p" defc="EnterVisualMode"
- r#"  "nnoremap <C-v>	paste_clipboard_after"#
(Ⓝ)V "PasteBefore" defk="P" defc="EnterVisualLineMode"
- r#""nnoremap I      	insert_at_line_start"#
- r#""nnoremap A      	insert_at_line_end"#
- r""
- r#""    'A-I'	=["split_selection_on_newline"	# ⭰䷖ Line: split & insert @ start"#
- r#""     ,   	  "insert_at_line_start"]     	#"#
- r#""    'A-O'	=["split_selection_on_newline"	# ䷖⭲ Line: split & insert @ end"#
- r#""     ,   	  "insert_at_line_end"]       	#"#
- r""
- r#"  "Ⓝ Select manipulation ————————————————————————————————————————————————————————————————————"#
- r#"  "nnoremap (	rotate_selection_contents_backward"#
- r#"  "nnoremap )	rotate_selection_contents_forward"#
- r#"  "nnoremap 7	align_selections"#
- r#"  "nnoremap &	align_selections"#
- r#"  "nnoremap =	format_selections"#
- r""
- r#"  "Ⓝ      	Misc"#
(Ⓝ)z r#":"command":"toggle_comment","args":{"block":false}<CR>"# defc="OpenNameSpace"
(Ⓝ)Z r#":"command":"toggle_comment","args":{"block":true }<CR>"# defc="OpenNameSpace"
(Ⓝ)"<M-z>" r#":"command":"toggle_comment","args":{"block":true ,"variant":3}<CR>"#
(Ⓝ)"<C-m>" "Decrement" defk="<C-x>" defc="MotionEnter"
(Ⓝ)"<C-,>" "Increment" defk="<C-a>"
(Ⓝ)"\\" ":set invwrap<CR>"
(Ⓝ)"<C-l>" "<C-z>"
- r""
- r#"  "  nnoremap $	shell_keep_pipe"#
- r""
- r#"  "Ⓝ space mode"#
- r#"  " "'"	= 'last_picker'"#
- r""
- r#"  "Ⓝ Shell   	#                  	#"#
- r#"  "  nnoremap !  	shell_insert_output"#
- r#"  "  nnoremap @  	shell_append_output"#
- r#"  "  nnoremap A-!	shell_append_output"#
- r""
- r""
- r#"" ## Cursor     	move"#
- r#"" #             	‸	search backward for the Nth occurrence of the ident under the cursor"#
- r#"" $             	‸	cursor to the end of Nth next line"#
- r#"" %             	‸	find the next (curly/square) bracket on this line and go to its match, or go to matching comment bracket, or go to matching preprocessor directive."#
- r#"" {count}%      	‸	go to N percentage in the file"#
- r#"" &             	🗘	repeat last :s"#
- r#"" ``            	‸	→position before latest jump"#
- r#"" `(            	‸	→current sentence         	start"#
- r#"" `)            	‸	→current sentence         	end"#
- r#"" `<            	‸	→highlighted area         	start"#
- r#"" `>            	‸	→highlighted area         	end"#
- r#"" `[            	‸	→last operated/putted text	start"#
- r#"" `]            	‸	→last operated/putted text	end"#
- r#"" `{            	‸	→current paragraph        	start"#
- r#"" `}            	‸	→current paragraph        	end"#
- r#"" `{a-zA-Z0-9}  	‸	→mark {a-zA-Z0-9}"#
- r#"" (             	‸	№    sentences	backward"#
- r#"" )             	‸	№    sentences	forward"#
- r#"" 0             	‸	→1st CHAR@Line start"#
- r#"" '{a-zA-Z0-9}  	‸	→1st CHAR@Line with mark {a-zA-Z0-9}"#
- r#"" ''            	‸	→1st CHAR@Line where the cursor was before the latest jump"#
- r#"" '(            	‸	→1st CHAR@Line sentence                 	start"#
- r#"" ')            	‸	→1st CHAR@Line sentence                 	end"#
- r#"" '<            	‸	→1st CHAR@Line buffer's highlighted area	start"#
- r#"" '>            	‸	→1st CHAR@Line buffer's highlighted area	end"#
- r#"" '[            	‸	→1st CHAR@Line last operated/put text   	start"#
- r#"" ']            	‸	→1st CHAR@Line last operated/put text   	end"#
- r#"" '{            	‸	→1st CHAR@Line paragraph                	start"#
- r#"" '}            	‸	→1st CHAR@Line paragraph                	end"#
- r#"" -             	‸	→1st CHAR N lines higher"#
- r#"" ^             	‸	→1st CHAR@Line of the line"#
- r#"" _             	‸	→1st CHAR@Line N - 1 lines lower"#
- r#"" *             	‸	search forward for the Nth occurrence of the ident under the cursor"#
- r#"" +             	‸	same as <CR>"#
- r#"" ,             	‸	repeat latest f, t, F or T in opposite direction N times"#
- r#"" .             	🗘	repeat last change with count replaced with N"#
- r#"" /{pattern}<CR>	‸	search forward for the Nth occurrence of {pattern}"#
- r#"" /<CR>         	‸	search forward for {pattern} of last search"#
- r#"" 1–9           	‸	prepend to command to give a count"#
- r""
- r#"""" Ⓝ ☰Minor modes  Accessible from Normal mode, typically switch back to Normal mode after a command"#
- r""
- r#"" includeTemplate (joinPath .cfg "nHelp.toml.tmpl") (dict "m" "normal" "i" "Ⓝ ☰?" "k" "F1" "cfg" .cfg) ›"#
- r""
- r#""nnoremap	` 	cmd 	Ⓝ ☰𝔸𝕒 Case conversion mode	「 」   	「 」"#
(Ⓝ)`j "guiw"
(Ⓝ)`k "cru"
- r#""nnoremap	`l	crm"#
(Ⓝ)"`;" "crc"
(Ⓝ)`m "crm"
(Ⓝ)`- "cr-"
(Ⓝ)`. "cr."
- r""
- r""
- r#"" includeTemplate (joinPath .cfg "nView.nv.tmpl") (dict "m" "normal" "i" "Ⓝ ☰👁" "k" "p" "cfg" .cfg) ›"#
- r#"  " # nnoremap p	view_mode_sticky"#
- r#"" includeTemplate (joinPath .cfg "nView.nv.tmpl") (dict "m" "normal" "i" "Ⓝ 👁ₛ" "k" "P" "cfg" .cfg) ›"#
- r#"" includeTemplate (joinPath .cfg "nView.nv.tmpl") (dict "m" "normal" "i" "Ⓝ 👁ₛ" "k" "Z" "cfg" .cfg) ›"#
- r""
- r#"" × not implemented yet"#
- r#"" Move"#
- r#"" noremap gs $"#
- r#"" "× g$        	‸  when 'wrap' off go to rightmost character of the current line that is on the screen; when 'wrap' on go to the rightmost character of the current screen line"#
- r#"" noremap gs g_	" g_ 	‸  cursor to the last CHAR N - 1 lines lower"#
- r#""              	"$   	‸  cursor to the end of Nth next line"#
- r#""              	" gm 	‸  go to character at middle of the screenline"#
- r#"   a"a         	"× gM	‸  go to characterga at middle of the text line"#
- r""
- r#""nnoremap g   	cmd                    	Ⓝ ⓖ☰⮊ Goto mode Jumps to various locations     	「 」      	「 」"#
(Ⓝ)gp "no_op" defc="PasteAfterWithAdjustedCursor"
(Ⓝ)gb "GotoExactMarkXpos" defk="`"
(Ⓝ)gA "GotoMark" defk="'"
(Ⓝ)gB "GotoMark" defk="'"
- r#""nnoremap gb  	jumplist_picker"#
(Ⓝ)ga "g^" defc="ShowAsciiValueOfChar"
(Ⓝ)gs "MoveToEol" defk="$"
(Ⓝ)gh "MoveToHardBol" defk="0" defc="MultipleCursorsStart"
(Ⓝ)gg "GotoBof" defk="gg" defc="GotoBof"
(Ⓝ)gj "MoveDownByLines" defk="j" defc="MoveByScreenLineDown"
(Ⓝ)gk "MoveUpByLines" defk="k" defc="MoveByScreenLineUp"
(Ⓝ)g' "GotoEof" defk="G"
(Ⓝ)gl "goto_prev_paragraph"
(Ⓝ)"g;" "goto_next_paragraph" defc="GotoOlderChange"
(Ⓝ)g. "goto_prev_paragraph"
(Ⓝ)"g/" "goto_next_paragraph"
(Ⓝ)gf "goto_file" defc="VigF"
(Ⓝ)gm "GotoScreenBottom" defk="L" defc="MoveHalfScreenHorizontally"
(Ⓝ)"g," "GotoScreenTop" defk="H" defc="GotoNewerChange"
(Ⓝ)gn "GotoScreenMiddle" defk="M" defc="SearchLastUsedPattern"
(Ⓝ)gD "goto_declaration" defc="GotoSymbolInProject"
(Ⓝ)gd "goto_definition" defc="GotoSymbolInFile"
(Ⓝ)gF12 "goto_definition"
(Ⓝ)gi "goto_implementation"
(Ⓝ)gt "goto_implementation" defc="ActivateNextTab"
(Ⓝ)gr "goto_reference"
(Ⓝ)ge "goto_type_definition" defc="MoveByWordEndsBackward"
(Ⓝ)gy "goto_type_definition"
(Ⓝ)gc "goto_last_accessed_file" defc="CommentaryMotion"
(Ⓝ)gv "goto_last_modified_file" defc="RestoreVisualSelections"
(Ⓝ)g1 "goto_previous_buffer"
(Ⓝ)g2 "goto_next_buffer"
(Ⓝ)g3 "jump_backward"
(Ⓝ)g4 "jump_forward"
(Ⓝ)gu "goto_last_modification" defc="ChangeToLowerCaseByChars"
- r#""nnoremap g'  	gotochar"#
- r""
- r#"" ☰🧩 Match Mode"#
- r#"" x=Visual v=Vis+Sel o=operator-pending"#
- r#"" xnoremap fails!!! maybe not implemented"#
- r#"" (+)  Surround current selection with <char>"#
(Ⓞ)ne "ATextObject" defk="a"
(Ⓞ)na "ITextObject" defk="i"
- r#""onoremap e 	a"#
- r#""onoremap a 	i"#
- r#""onoremap aw	iw"#
- r#""onoremap aW	iW"#
- r#""onoremap as	is"#
- r#""onoremap at	it"#
- r""
- r#""" ☰  Surround (github.com/tpope/vim-surround), add text object after a command, eg, niwd to insert () around (word)"#
(Ⓝ)nx "Surroundds" defk="ds"
(Ⓞ)nx "Surroundds" defk="ds"
(Ⓝ)nt "Surroundcs" defk="cs"
(Ⓞ)nt "Surroundcs" defk="cs"
(Ⓝ)ni "ysi"
(Ⓝ)no "ysa"
(Ⓝ)nl "Surroundyss" defk="yss"
(Ⓥ)ni "SubstituteByLines" defk="S"
- r#"" # 2.1 Text objects"#
- r#"" These can be used after an operator or in Visual mode to select an object"#
- r#"" # cmd		action in op-pending and Visual mode"#
- r#"" a'   	string in single quotes"#
- r#"" a"   	string in double quotes"#
- r#"" a``  	string in backticks"#
- r#"" aw   	a word                   	(with white space)"#
- r#"" aW   	`a WORD`                 	(with white space)"#
- r#"" as   	a sentence               	(with white space)"#
- r#"" ap   	a paragraph              	(with white space)"#
- r#"" at   	a tag block              	(with white space)"#
- r#"" ab   	a block from `[(` to `])`	(with braces)"#
- r#"" a(¦) 	=`ab`"#
- r#"" aB   	`a Block` from `[{` to `]}`	(with brackets)"#
- r#"" a{¦} 	=`aB`"#
- r#"" a[   	`a []`    from `[` to matching `]`"#
- r#"" a]   	=`a[`"#
- r#"" a<   	`a <>`    from `<` to matching `>`"#
- r#"" a>   	=`a<`"#
- r#"" i"   	string in double quotes without quotes"#
- r#"" i'   	string in single quotes without quotes"#
- r#"" i\`  	string in backticks     without backticks"#
- r#"" iw   	inner word"#
- r#"" iW   	inner WORD"#
- r#"" is   	inner sentence"#
- r#"" ip   	inner paragraph"#
- r#"" it   	inner tag block"#
- r#"" ib   	inner block from `[(` to `])`"#
- r#"" i(¦) 	=`ib`"#
- r#"" iB   	inner Block from `[{` and `]}`"#
- r#"" i{¦} 	=`iB`"#
- r#"" i[   	inner `[]`  from `[` to matching `]`"#
- r#"" i]   	=`i[`"#
- r#"" i<   	inner `<>`  from `<` to matching `>`"#
- r#"" i>   	=`i<`"#
- r""
- r#"" includeTemplate (joinPath .cfg "nWindow.nv.tmpl") (dict "m" "normal" "i" "Ⓝ ☰🗔" "k" "C-w" "ksp" "" "cfg" .cfg) ›"#
- r""
- r""
let mapleader="<space>"
- r""
- r#""nnoremap	space            	cmd                   	Ⓝ Space mode	「 」   	「 」"#
(Ⓝ)"<space><space>" ":NvEnterNormalMode<CR>"
- r""
- r""
- r#"" includeTemplate (joinPath .cfg "nUnimpaired.nv.tmpl") (dict "m" "normal" "i" "Ⓝ" "k1" "[" "k0" "]" "cfg" .cfg) ›"#
- r#"" ⓘ Insert mode ——————————————————————————————————————————————————————————————————————"#
- r#"" Can't be remapped, use this temporarily"#
(Ⓥ)"<M-I>" r#":"command":"swap_line_down"<CR>"#
(Ⓥ)"<M-O>" r#":"command":"swap_line_up"<CR>"#
- r""
- r#""Ⓝ Test ——————————————————————————————————————————————————————————————————————"#
(Ⓥ)а "MoveByWordEnds" defk="e"
(Ⓥ)в "MoveByWordsBackward" defk="b"
- r#"" noremap Д w"#
- r#"" noremap й     	 w"#
- r#"" noremap ц     	 w"#
- r#"" noremap у     	 w"#
- r#"" noremap к     	 w"#
- r#"" noremap е     	 w"#
- r#"" noremap н     	 w"#
- r#"" noremap ф     	 w"#
- r#"" noremap ы     	 w"#
- r#"" noremap в     	 w"#
- r#"" noremap а     	 w"#
- r#"" noremap п     	 w"#
- r#"" " noremap й   	 q"#
- r#"" noremap <f1>  	 w"#
- r#"" noremap <f2>  	 w"#
- r#"" noremap <f3>  	 b"#
- r#"" noremap <f4>  	 e"#
- r#"" noremap <f5>  	 e"#
- r#"" noremap <S-f6>	 b"#
- r#"" noremap <S-f7>	 w"#
- r#"" noremap <f6>  	 b"#
- r#"" noremap <f7>  	 w"#
- r#"" " noremap <⇟> b"#
- r""
(Ⓥ)"<space>d" ":Neovintageous action=toggle_side_bar<CR>"
- r#"" vnoremap gg     	:Neovintageous action=toggle_side_bar<CR>"#
- r#"" vnoremap t r    	2  replace N chars with {char}"#
- r""
- r#"" vnoremap <C-q>	:quit!"#
- r#"" vnoremap G    	move_prev_word_end"#
- r#"" vnoremap 0    	univeral_arg"#
- r#"" 'C-j'     	= ['page_down','align_view_center']	# ⇟ Move      page down"#
- r#"" 'C-k'     	= ['page_up','align_view_center']  	# ⇞ Move      page up"#
- r""
- r#"" 'C-K'	= "insert_char"	# ⇞ Move      page up"#
- r""
- r#""Ⓝ Free ——————————————————————————————————————————————————————————————————————"#
- r#"  "vnoremap <C-u>	no_op"#
- r#"  "vnoremap <A-C>	no_op"#
- r#"  "vnoremap A-(  	no_op"#
- r#"  "vnoremap A-)  	no_op"#
- r#"  "vnoremap <A-K>	no_op"#
- r#"  "vnoremap <C-i>	no_op"#
- r#"  "vnoremap b    	no_op"#
- r#""    '~'     	= "no_op"       	#"#
- r#""    'A-`'   	= "no_op"       	#"#
- r#"" vnoremap X     	change_selection"#
- r#""Ⓝ Major modes ——————————————————————————————————————————————————————————————————————"#
- r#"" vnoremap i	insert_mode"#
- r#"" vnoremap e	select_mode"#
- r#""Ⓝ Minor modes / menu dialogs ———————————————————————————————————————————————————————"#
- r#""p    	  	 ☰👁 View mode            	Ⓝ"#
- r#""P    	  	 ☰👁ₛ 'sticky', persistent	Ⓝ"#
- r#""Z    	  	 ☰👁ₛ 'sticky', persistent	Ⓝ"#
- r#""g    	  	 ⓖ☰⮊ Goto mode           	  Ⓝ"#
- r#""⎇d   	gh	 ☰Multicursor (@select)  	Ⓝ"#
- r#""n    	  	 ☰🧩  Match mode          	Ⓝ ☰<i class='fa fa-puzzle-piece'></i>"#
- r#""C-w  	  	 ☰🗔  Window mode         	  Ⓝ"#
- r#""space	  	 ☰␠  Space mode          	  Ⓝ"#
- r#""[    	  	 ☰⧛ Unimpaired           	  Ⓝ"#
- r#""]    	  	 ☰⧚                      	  Ⓝ"#
- r#""`    	  	 ☰𝔸𝕒 Case conversion     	  Ⓝ"#
- r""
(Ⓥ): "EnterCommandLineMode" defk=":" defc="EnterCommandLineMode"
(Ⓥ)R r#":"command":"show_overlay","args":{"overlay":"command_palette"}<CR>"# defc="EnterReplaceMode"
- r""
- r#""vnoremap g	:"command":"show_overlay","args":{"overlay":"goto","text":"@"}<CR>"#
- r""
- r#"  "Ⓝ              	Compat with non-modal editors"#
- r#"  " vnoremap <C-o>    	file_picker"#
- r#"  " vnoremap <C-O>    	file_picker_in_current_directory"#
- r#"  " vnoremap <C-s>    	commit_undo_checkpoint :write   	# 💾 save file"#
- r#"  " vnoremap C-S-s    	Save As"#
- r#"  " vnoremap <C-n>    	:new"#
- r#"  " vnoremap C-S-t    	open-last-closed"#
- r#"  " vnoremap C-+      	zoom-in"#
- r#"  " vnoremap <C-minus>	zoom-out"#
- r""
- r#"  "Ⓝ       	Copy"#
(Ⓥ)c "YankSelectByChars" defk="y" defc="ChangeByChars"
- r#""vnoremap <C-c>	??"#
- r#""vnoremap C    	??"#
- r#""vnoremap <A-c>	??"#
- r""
- r#"  "Ⓝ Shell"#
- r#"" vnoremap |  	shell_pipe"#
- r#""A-\\"    	= 'shell_pipe_to'"#
- r#"" vnoremap A-|	shell_pipe_to"#
- r""
- r#"  "Ⓝ Move ——————————————————————————————————————————————————————————————————————"#
- r#"" Cursor@H"#
(Ⓥ)j "MoveByScreenLineDown" defk="gj" defc="MoveDownByLines"
(Ⓥ)k "MoveByScreenLineUp" defk="gk" defc="MoveUpByLines"
(Ⓥ)l "MoveLeftByChars" defk="h" defc="MoveRightByChars"
(Ⓥ)";" "MultipleCursorsSkip" defk="l" defc="RepeatCharSearchForward"
(Ⓥ)m "MoveHalfScreenDown" defk="<C-d>" defc="SetMark"
(Ⓥ)"," "MoveHalfScreenUp" defk="<C-u>" defc="RepeatCharSearchBackward"
(Ⓥ)"<C-j>" "MoveScreenDown" defk="<C-f>" defc="MoveDownByLines"
(Ⓥ)"<C-k>" "MoveScreenUp" defk="<C-b>" defc="OpenNameSpace"
- r#"" vnoremap	a    	0"#
- r#"" vnoremap	A    	$"#
(Ⓥ)a r#":"command":"move_to","args":{"to":"bol","extend":false}<CR>"# defc="ATextObject"
(Ⓥ)A r#":"command":"move_to","args":{"to":"eol","extend":false}<CR>"# defc="InsertAtEol"
- r#"" ⎈e  	     	scroll Up   N lines (Extra) bug https://github.com/NeoVintageous/NeoVintageous/issues/866"#
- r""
- r#""vnoremap g	:"command":"show_overlay","args":{"overlay":"goto","text":"@"}<CR>"#
- r""
- r#""Ⓝ               	Compat with non-modal editors"#
(Ⓥ)"<C-home>" "GotoBof" defk="gg" defc="GotoBof"
(Ⓥ)"<C-end>" "GotoEof" defk="G"
- r#""vnoremap <D-Home>   	gg"#
- r#""vnoremap <D-End>    	G"#
(Ⓥ)"<D-up>" "GotoBof" defk="gg"
(Ⓥ)"<D-down>" "GotoEof" defk="G"
(Ⓥ)"<D-1>" "ActivatePreviousTab" defk="gT"
(Ⓥ)"<D-2>" "ActivateNextTab" defk="gt"
(Ⓥ)"<C-S-tab>" "ActivatePreviousTab" defk="gT"
(Ⓥ)"<C-tab>" "ActivateNextTab" defk="gt"
(Ⓥ)"<C-pageup>" "ActivatePreviousTab" defk="gT" defc="ActivatePreviousTab"
(Ⓥ)"<C-pagedown>" "ActivateNextTab" defk="gt" defc="ActivateNextTab"
(Ⓥ)"<M-pageup>" "JumpBack" defk="<C-o>"
(Ⓥ)"<M-pagedown>" "<Tab>"
(Ⓥ)"<C-j>" "JumpBack" defk="<C-o>" defc="MoveDownByLines"
(Ⓥ)"<C-;>" "<Tab>"
- r""
(Ⓥ)"1" "ActivatePreviousTab" defk="gT"
(Ⓥ)"<M-1>" "ActivatePreviousTab" defk="gT"
(Ⓥ)"2" "ActivateNextTab" defk="gt"
(Ⓥ)"<M-2>" "ActivateNextTab" defk="gt"
(Ⓥ)"3" "JumpBack" defk="<C-o>"
(Ⓥ)"<M-3>" "JumpBack" defk="<C-o>"
(Ⓥ)"<S-tab>" "JumpBack" defk="<C-o>"
(Ⓥ)"4" "<Tab>"
(Ⓥ)"<M-4>" "<Tab>"
- r#""vnoremap <Tab> 	<Tab>"#
- r""
- r""
- r#""Ⓝ word !!! sometimes prev≠next by a space"#
(Ⓥ)f "MoveByWordEnds" defk="e" defc="SearchCharForward"
(Ⓥ)"<M-f>" "MoveByWords" defk="w"
(Ⓥ)"<M-right>" "MoveByWords" defk="w" defc="MoveRightByChars"
(Ⓥ)d "MoveByWordsBackward" defk="b" defc="DeleteByChars"
(Ⓥ)"<M-d>" "MoveByWordEndsBackward" defk="ge"
(Ⓥ)"<M-left>" "MoveByWordEndsBackward" defk="ge" defc="MoveLeftByChars"
(Ⓥ)F "MoveByBigWordEnds" defk="E" defc="SearchCharBackward"
(Ⓥ)"<M-F>" "MoveByBigWords" defk="W"
(Ⓥ)D "MoveByBigWordsBackward" defk="B" defc="DeleteToEol"
(Ⓥ)"<M-D>" "MoveByBigWordEndsBackward" defk="gE"
(Ⓥ)"<C-f>" "MoveByBigWordEnds" defk="E" defc="MoveScreenDown"
(Ⓥ)"<C-d>" "MoveByBigWordEndsBackward" defk="gE" defc="MoveHalfScreenDown"
(Ⓥ)"<C-right>" "MoveByBigWords" defk="W" defc="MoveByBigWords"
(Ⓥ)"<C-left>" "MoveByBigWordsBackward" defk="B" defc="MoveByBigWordsBackward"
- r#""vnoremap G       	gg"#
- r""
- r#""Ⓝ         	Line"#
(Ⓥ)"<home>" "MoveToHardBol" defk="0" defc="MoveToBol"
(Ⓥ)"<end>" "MoveToEol" defk="$" defc="MoveToEol"
- r""
- r#""Ⓝ    	Block"#
(Ⓥ)">" "MoveByBlockUp" defk="{" defc="Indent"
(Ⓥ)? "MoveByBlockDown" defk="}" defc="SearchBackward"
- r""
- r#""Ⓝ         	Marked"#
- r#""vnoremap <A-g>	jumplist_picker"#
(Ⓥ)"<M-g>" "GotoExactMarkXpos" defk="`"
- r""
(Ⓥ)r "RepeatCharSearchForward" defk=";" defc="ReplaceCharacters"
(Ⓥ)"<M-R>" "RepeatCharSearchBackward" defk=","
- r""
- r#""Ⓝ        	Find"#
(Ⓥ)"<M-w>" "SearchCharForwardTill" defk="t"
(Ⓥ)w "SearchCharForward" defk="f" defc="MoveByWords"
(Ⓥ)"<M-W>" "SearchCharBackwardTill" defk="T"
(Ⓥ)W "SearchCharBackward" defk="F" defc="MoveByBigWords"
(Ⓥ)S "SearchBackward" defk="?" defc="SubstituteByLines"
(Ⓥ)s "SearchForward" defk="/" defc="SubstituteChar"
(Ⓥ). "?<CR>" defc="Repeat"
(Ⓥ)"/" "/<CR>" defc="SearchForward"
- r#"" vnoremap 8  	search_selection"#
- r#"" vnoremap *  	search_selection"#
(Ⓥ)"8" "FindWord" defk="*"
(Ⓥ)* "ReverseFindWord" defk="#" defc="FindWord"
- r""
- r#"  "Ⓝ Select ——————————————————————————————————————————————————————————————————————"#
(Ⓥ)e "EnterNormalMode" defk="v" defc="MoveByWordEnds"
- r""
- r#""Ⓝ            	Compat with non-modal editors"#
- r#""    'C-a'    	= ['save_selection','select_all']                     	# 🖈∀▋"#
(Ⓥ)"<M-down>" r#":"command":"select_lines","args":{"forward":true }<CR>"#
(Ⓥ)"<M-up>" r#":"command":"select_lines","args":{"forward":false}<CR>"#
(Ⓥ)"<S-down>" "vj" defc="MoveScreenDown"
(Ⓥ)"<S-up>" "vk" defc="MoveScreenUp"
(Ⓥ)"<S-left>" "vh" defc="MoveByWordsBackward"
(Ⓥ)"<S-right>" "vl" defc="MoveByWords"
- r""
- r#""Ⓝ             	Mark jump points"#
(Ⓥ)G "SetMark" defk="m" defc="GotoEof"
(Ⓥ)"<C-g>" "SetMark" defk="m" defc="ShowFileStatus"
(Ⓥ)"<M-g><M-g>" "GotoExactMarkXpos" defk="`"
(Ⓥ)"<M-g><M-x>" ":delmarks!"
(Ⓥ)"<M-g><M-h>" ":delmarks"
- r""
(Ⓥ)J "EnterVisualLineMode" defk="V" defc="JoinLines"
- r#""vnoremap <A-r>	extend_line"#
(Ⓥ)E "EnterVisualLineMode" defk="V" defc="MoveByBigWordEnds"
(Ⓥ)"<M-e>" "FindWord" defk="*"
(Ⓥ)"<M-E>" "ReverseFindWord" defk="#"
(Ⓥ)"5" "vip"
(Ⓥ)% ":%y<CR>" defc="Percent"
- r""
- r#"" ↓×2 mapped in Karabiner to l⎇ to work in both modes and not interfere with insert symbols mapped to those keys"#
- r#"" !!!todo: rebind to l⎇ when Sublime supports side modifiers"#
(Ⓥ)"<M-j>" r#":"command":"select_lines"  ,"args":{"forward":true }<CR>"#
(Ⓥ)"<M-k>" r#":"command":"select_lines"  ,"args":{"forward":false}<CR>"#
(Ⓥ)"<M-J>" r#":"command":"deselect_lines","args":{"forward":true }<CR>"#
(Ⓥ)"<M-K>" r#":"command":"deselect_lines","args":{"forward":false}<CR>"#
- r#""vnoremap <A-l>	select_prev_sibling"#
- r#""vnoremap A-;  	select_next_sibling"#
- r#""vnoremap M    	shrink_selection"#
- r#""vnoremap <    	expand_selection"#
- r#""vnoremap <A-s>	select_regex"#
- r#""vnoremap N    	split_selection"#
- r#""vnoremap <A-n>	split_selection_on_newline"#
- r""
- r#"  "vnoremap "'"   	collapse_selection"#
- r#"  "vnoremap <A-'> 	flip_selections"#
- r#"  "vnoremap <A-a> 	flip_selections"#
- r#"  "vnoremap <A-A> 	flip_selections"#
- r#"  "vnoremap <A-p> 	ensure_selections_forward"#
- r#"  "vnoremap <A-:> 	ensure_selections_forward"#
- r#"  ""vnoremap <A-l>	rotate_selections_backward"#
- r#"  ""vnoremap <A-;>	rotate_selections_forward"#
- r#"  "vnoremap <A-m> 	rotate_selections_forward"#
- r#"  "vnoremap A-,   	rotate_selections_backward"#
- r#"  "vnoremap <A-u> 	remove_primary_selection"#
(Ⓥ)"<M-i>" r#":"command":"deselect_lines_to_first"<CR>"#
(Ⓥ)"<M-o>" r#":"command":"deselect_lines_to_last"<CR>"#
(Ⓥ)"<M-U>" r#":"command":"soft_undo"<CR>"#
- r#"  "vnoremap K     	keep_selections"#
- r#"  "vnoremap L     	remove_selections"#
- r#"  "vnoremap <A-Z> 	:"command":"deselect_lines_to_first"<CR>"#
- r#"  "      ,    	  'collapse_selection']                 	                                                      		#"#
- r""
- r#"  "vnoremap minus	trim_selections"#
- r#"  "vnoremap _    	merge_consecutive_selections"#
- r#"  "vnoremap +    	dupe_selections"#
- r""
- r#"  "Ⓝ Change ——————————————————————————————————————————————————————————————————————"#
- r#"  "                  	Compat with non-modal editors"#
- r#"  "vnoremap <A-del>      	delete_word_forward"#
- r#"  "    'C-del'       	= ['extend_next_long_word_end',  	# ⌦W"#
- r#"  "                  	   'delete_selection']           	# ᵡ Word →"#
- r#"  "vnoremap <A-backspace>	delete_word_backward"#
- r#"  "    'C-backspace' 	= ['extend_prev_long_word_start',	# ⌫W"#
- r#"  "                  	   'delete_selection']           	# ᵡ Word ←"#
- r#"  "vnoremap del          	delete_selection"#
- r#"  "vnoremap <S-del>      	delete_selection_noyank"#
(Ⓥ)"<cr>" "o<Esc>" defc="MotionEnter"
(Ⓥ)"<S-cr>" "O<Esc>" defc="ShiftEnterMotion"
(Ⓥ)"<C-y>" "Redo" defk="<C-r>" defc="ScrollByLinesUp"
(Ⓥ)"<C-z>" "ChangeToLowerCaseByCharsVisual" defk="u"
(Ⓥ)"<C-Z>" "Redo" defk="<C-r>"
- r""
(Ⓥ)"<C-/>" r#":"command":"toggle_comment","args":{"block":false}<CR>"#
- r""
- r""
- r#"  "vnoremap <C-ret>	:reflow"#
- r""
- r""
- r#"  "vnoremap .    	N/A"#
- r#"  "vnoremap 6    	delete_char_forward"#
(Ⓥ)x "DeleteMultipleCursor" defk="d" defc="RightDeleteChars"
- r#"  "vnoremap <A-x>	delete_selection_noyank"#
- r#"  "vnoremap <A-c>	change_selection"#
(Ⓥ)h "LeftDeleteChar" defk="X" defc="MoveLeftByChars"
(Ⓥ)"<bs>" "LeftDeleteChar" defk="X" defc="MoveLeftByChars"
(Ⓥ)"<C-h>" "LeftDeleteChar" defk="X" defc="MoveLeftByChars"
(Ⓥ)H "RightDeleteChars" defk="<del>" defc="GotoScreenTop"
- r#""vnoremap del    	delete_char_forward"#
- r#""vnoremap <C-d>  	delete_char_forward"#
- r#"  "vnoremap <A-h>	delete_word_backward"#
- r#"  "vnoremap <A-H>	delete_word_forward"#
- r#""    'C-h'   	= ['move_prev_long_word_start',      	# ⌫W"#
- r#""            	   'delete_selection']               	# ᵡ Word ←"#
- r#""    'C-x'   	= ['yank_main_selection_to_clipboard'	                                  	,"#
- r#""            	   'delete_selection']               	#                                 		×📋 cut to clipboard <i class='fa fa-clipboard'></i>"#
- r#"  "vnoremap X    	join_selections"#
- r#"  "vnoremap <A-X>	join_selections_space"#
- r""
(Ⓥ)t "ReplaceCharacters" defk="r" defc="SearchCharForwardTill"
- r#"  "vnoremap T    	replace_with_yanked"#
- r#"  "vnoremap <A-t>	replace_selections_with_clipboard"#
- r""
- r#"  "vnoremap `"#
(Ⓥ)B "guiw" defc="MoveByBigWordsBackward"
(Ⓥ)"<C-b>" "cru" defc="MoveScreenUp"
- r""
- r#"  " Ⓝ     	line"#
(Ⓥ)"<C-J>" r#":"command":"swap_line_down"<CR>"#
(Ⓥ)"<C-K>" r#":"command":"swap_line_up"<CR>"#
- r""
- r#"  "vnoremap A-.	unindent"#
- r#"  "vnoremap A-/	indent"#
- r""
- r#"  "vnoremap q	record_macro"#
- r#"  "vnoremap Q	replay_macro"#
- r#"  "vnoremap "	select_register"#
- r""
(Ⓥ)b "Repeat" defk="." defc="MoveByWordsBackward"
(Ⓥ)"<M-B>" "RepeatCharSearchBackward" defk=","
(Ⓥ)i "EnterInsertMode" defk="i" defc="ITextObject"
(Ⓥ)o "ATextObject" defk="a" defc="GoToOtherEnd"
(Ⓥ)O "GoToOtherEnd" defk="o" defc="GoToOtherBigEnd"
(Ⓥ)I "GoToOtherBigEnd" defk="O" defc="InsertAtBol"
(Ⓥ)u "ChangeToLowerCaseByCharsVisual" defk="u" defc="ChangeToLowerCaseByCharsVisual"
(Ⓥ)y "Redo" defk="<C-r>" defc="YankByChars"
- r#"  "vnoremap U    	earlier"#
- r#"  "vnoremap Y    	later"#
(Ⓥ)v "PasteAfter" defk="p" defc="EnterVisualMode"
- r#"  "vnoremap <C-v>	paste_clipboard_after"#
(Ⓥ)V "PasteBefore" defk="P" defc="EnterVisualLineMode"
- r#""vnoremap I      	insert_at_line_start"#
- r#""vnoremap A      	insert_at_line_end"#
- r""
- r#""    'A-I'	=["split_selection_on_newline"	# ⭰䷖ Line: split & insert @ start"#
- r#""     ,   	  "insert_at_line_start"]     	#"#
- r#""    'A-O'	=["split_selection_on_newline"	# ䷖⭲ Line: split & insert @ end"#
- r#""     ,   	  "insert_at_line_end"]       	#"#
- r""
- r#"  "Ⓝ Select manipulation ————————————————————————————————————————————————————————————————————"#
- r#"  "vnoremap (	rotate_selection_contents_backward"#
- r#"  "vnoremap )	rotate_selection_contents_forward"#
- r#"  "vnoremap 7	align_selections"#
- r#"  "vnoremap &	align_selections"#
- r#"  "vnoremap =	format_selections"#
- r""
- r#"  "Ⓝ      	Misc"#
(Ⓥ)z r#":"command":"toggle_comment","args":{"block":false}<CR>"# defc="OpenNameSpace"
(Ⓥ)Z r#":"command":"toggle_comment","args":{"block":true }<CR>"# defc="OpenNameSpace"
(Ⓥ)"<M-z>" r#":"command":"toggle_comment","args":{"block":true ,"variant":3}<CR>"#
(Ⓥ)"<C-m>" "MultipleCursorsSkip" defk="<C-x>" defc="MotionEnter"
(Ⓥ)"<C-,>" "Increment" defk="<C-a>"
(Ⓥ)"\\" ":set invwrap<CR>"
(Ⓥ)"<C-l>" "<C-z>"
- r""
- r#"  "  vnoremap $	shell_keep_pipe"#
- r""
- r#"  "Ⓝ space mode"#
- r#"  " "'"	= 'last_picker'"#
- r""
- r#"  "Ⓝ Shell   	#                  	#"#
- r#"  "  vnoremap !  	shell_insert_output"#
- r#"  "  vnoremap @  	shell_append_output"#
- r#"  "  vnoremap A-!	shell_append_output"#
- r""
- r""
- r#"" ## Cursor     	move"#
- r#"" #             	‸	search backward for the Nth occurrence of the ident under the cursor"#
- r#"" $             	‸	cursor to the end of Nth next line"#
- r#"" %             	‸	find the next (curly/square) bracket on this line and go to its match, or go to matching comment bracket, or go to matching preprocessor directive."#
- r#"" {count}%      	‸	go to N percentage in the file"#
- r#"" &             	🗘	repeat last :s"#
- r#"" ``            	‸	→position before latest jump"#
- r#"" `(            	‸	→current sentence         	start"#
- r#"" `)            	‸	→current sentence         	end"#
- r#"" `<            	‸	→highlighted area         	start"#
- r#"" `>            	‸	→highlighted area         	end"#
- r#"" `[            	‸	→last operated/putted text	start"#
- r#"" `]            	‸	→last operated/putted text	end"#
- r#"" `{            	‸	→current paragraph        	start"#
- r#"" `}            	‸	→current paragraph        	end"#
- r#"" `{a-zA-Z0-9}  	‸	→mark {a-zA-Z0-9}"#
- r#"" (             	‸	№    sentences	backward"#
- r#"" )             	‸	№    sentences	forward"#
- r#"" 0             	‸	→1st CHAR@Line start"#
- r#"" '{a-zA-Z0-9}  	‸	→1st CHAR@Line with mark {a-zA-Z0-9}"#
- r#"" ''            	‸	→1st CHAR@Line where the cursor was before the latest jump"#
- r#"" '(            	‸	→1st CHAR@Line sentence                 	start"#
- r#"" ')            	‸	→1st CHAR@Line sentence                 	end"#
- r#"" '<            	‸	→1st CHAR@Line buffer's highlighted area	start"#
- r#"" '>            	‸	→1st CHAR@Line buffer's highlighted area	end"#
- r#"" '[            	‸	→1st CHAR@Line last operated/put text   	start"#
- r#"" ']            	‸	→1st CHAR@Line last operated/put text   	end"#
- r#"" '{            	‸	→1st CHAR@Line paragraph                	start"#
- r#"" '}            	‸	→1st CHAR@Line paragraph                	end"#
- r#"" -             	‸	→1st CHAR N lines higher"#
- r#"" ^             	‸	→1st CHAR@Line of the line"#
- r#"" _             	‸	→1st CHAR@Line N - 1 lines lower"#
- r#"" *             	‸	search forward for the Nth occurrence of the ident under the cursor"#
- r#"" +             	‸	same as <CR>"#
- r#"" ,             	‸	repeat latest f, t, F or T in opposite direction N times"#
- r#"" .             	🗘	repeat last change with count replaced with N"#
- r#"" /{pattern}<CR>	‸	search forward for the Nth occurrence of {pattern}"#
- r#"" /<CR>         	‸	search forward for {pattern} of last search"#
- r#"" 1–9           	‸	prepend to command to give a count"#
- r""
- r#"""" Ⓝ ☰Minor modes  Accessible from Normal mode, typically switch back to Normal mode after a command"#
- r""
- r#"" includeTemplate (joinPath .cfg "nHelp.toml.tmpl") (dict "m" "normal" "i" "Ⓝ ☰?" "k" "F1" "cfg" .cfg) ›"#
- r""
- r#""vnoremap	` 	cmd 	Ⓝ ☰𝔸𝕒 Case conversion mode	「 」   	「 」"#
(Ⓥ)`j "guiw"
(Ⓥ)`k "cru"
- r#""vnoremap	`l	crm"#
(Ⓥ)"`;" "crc"
(Ⓥ)`m "crm"
(Ⓥ)`- "cr-"
(Ⓥ)`. "cr."
- r""
- r""
- r#"" includeTemplate (joinPath .cfg "nView.nv.tmpl") (dict "m" "normal" "i" "Ⓝ ☰👁" "k" "p" "cfg" .cfg) ›"#
- r#"  " # vnoremap p	view_mode_sticky"#
- r#"" includeTemplate (joinPath .cfg "nView.nv.tmpl") (dict "m" "normal" "i" "Ⓝ 👁ₛ" "k" "P" "cfg" .cfg) ›"#
- r#"" includeTemplate (joinPath .cfg "nView.nv.tmpl") (dict "m" "normal" "i" "Ⓝ 👁ₛ" "k" "Z" "cfg" .cfg) ›"#
- r""
- r#"" × not implemented yet"#
- r#"" Move"#
- r#"" noremap gs $"#
- r#"" "× g$        	‸  when 'wrap' off go to rightmost character of the current line that is on the screen; when 'wrap' on go to the rightmost character of the current screen line"#
- r#"" noremap gs g_	" g_ 	‸  cursor to the last CHAR N - 1 lines lower"#
- r#""              	"$   	‸  cursor to the end of Nth next line"#
- r#""              	" gm 	‸  go to character at middle of the screenline"#
- r#"   a"a         	"× gM	‸  go to characterga at middle of the text line"#
- r""
- r#""vnoremap g   	cmd                    	Ⓝ ⓖ☰⮊ Goto mode Jumps to various locations     	「 」      	「 」"#
(Ⓥ)gp "no_op" defc="PasteAfterWithAdjustedCursor"
(Ⓥ)gb "GotoExactMarkXpos" defk="`"
(Ⓥ)gA "GotoMark" defk="'"
(Ⓥ)gB "GotoMark" defk="'"
- r#""vnoremap gb  	jumplist_picker"#
(Ⓥ)ga "g^" defc="ShowAsciiValueOfChar"
(Ⓥ)gs "MoveToEol" defk="$"
(Ⓥ)gh "MoveToHardBol" defk="0" defc="MultipleCursorsStart"
(Ⓥ)gg "GotoBof" defk="gg" defc="GotoBof"
(Ⓥ)gj "MultipleCursorsAdd" defk="j" defc="MoveByScreenLineDown"
(Ⓥ)gk "MultipleCursorsRemove" defk="k" defc="MoveByScreenLineUp"
(Ⓥ)g' "GotoEof" defk="G"
(Ⓥ)gl "goto_prev_paragraph"
(Ⓥ)"g;" "goto_next_paragraph" defc="GotoOlderChange"
(Ⓥ)g. "goto_prev_paragraph"
(Ⓥ)"g/" "goto_next_paragraph"
(Ⓥ)gf "goto_file" defc="Vigf"
(Ⓥ)gm "GotoScreenBottom" defk="L" defc="MoveHalfScreenHorizontally"
(Ⓥ)"g," "GotoScreenTop" defk="H" defc="GotoNewerChange"
(Ⓥ)gn "GotoScreenMiddle" defk="M" defc="SearchLastUsedPattern"
(Ⓥ)gD "goto_declaration" defc="GotoSymbolInProject"
(Ⓥ)gd "goto_definition" defc="GotoSymbolInFile"
(Ⓥ)gF12 "goto_definition"
(Ⓥ)gi "goto_implementation"
(Ⓥ)gt "goto_implementation" defc="ActivateNextTab"
(Ⓥ)gr "goto_reference"
(Ⓥ)ge "goto_type_definition" defc="MoveByWordEndsBackward"
(Ⓥ)gy "goto_type_definition"
(Ⓥ)gc "goto_last_accessed_file" defc="CommentaryMotion"
(Ⓥ)gv "goto_last_modified_file" defc="RestoreVisualSelections"
(Ⓥ)g1 "goto_previous_buffer"
(Ⓥ)g2 "goto_next_buffer"
(Ⓥ)g3 "jump_backward"
(Ⓥ)g4 "jump_forward"
(Ⓥ)gu "goto_last_modification" defc="ChangeToLowerCaseByChars"
- r#""vnoremap g'  	gotochar"#
- r""
- r#"" ☰🧩 Match Mode"#
- r#"" x=Visual v=Vis+Sel o=operator-pending"#
- r#"" xnoremap fails!!! maybe not implemented"#
- r#"" (+)  Surround current selection with <char>"#
(Ⓞ)ne "ATextObject" defk="a"
(Ⓞ)na "ITextObject" defk="i"
- r#""onoremap e 	a"#
- r#""onoremap a 	i"#
- r#""onoremap aw	iw"#
- r#""onoremap aW	iW"#
- r#""onoremap as	is"#
- r#""onoremap at	it"#
- r""
- r#""" ☰  Surround (github.com/tpope/vim-surround), add text object after a command, eg, niwd to insert () around (word)"#
(Ⓝ)nx "Surroundds" defk="ds"
(Ⓞ)nx "Surroundds" defk="ds"
(Ⓝ)nt "Surroundcs" defk="cs"
(Ⓞ)nt "Surroundcs" defk="cs"
(Ⓝ)ni "ysi"
(Ⓝ)no "ysa"
(Ⓝ)nl "Surroundyss" defk="yss"
(Ⓥ)ni "SubstituteByLines" defk="S"
- r#"" # 2.1 Text objects"#
- r#"" These can be used after an operator or in Visual mode to select an object"#
- r#"" # cmd		action in op-pending and Visual mode"#
- r#"" a'   	string in single quotes"#
- r#"" a"   	string in double quotes"#
- r#"" a``  	string in backticks"#
- r#"" aw   	a word                   	(with white space)"#
- r#"" aW   	`a WORD`                 	(with white space)"#
- r#"" as   	a sentence               	(with white space)"#
- r#"" ap   	a paragraph              	(with white space)"#
- r#"" at   	a tag block              	(with white space)"#
- r#"" ab   	a block from `[(` to `])`	(with braces)"#
- r#"" a(¦) 	=`ab`"#
- r#"" aB   	`a Block` from `[{` to `]}`	(with brackets)"#
- r#"" a{¦} 	=`aB`"#
- r#"" a[   	`a []`    from `[` to matching `]`"#
- r#"" a]   	=`a[`"#
- r#"" a<   	`a <>`    from `<` to matching `>`"#
- r#"" a>   	=`a<`"#
- r#"" i"   	string in double quotes without quotes"#
- r#"" i'   	string in single quotes without quotes"#
- r#"" i\`  	string in backticks     without backticks"#
- r#"" iw   	inner word"#
- r#"" iW   	inner WORD"#
- r#"" is   	inner sentence"#
- r#"" ip   	inner paragraph"#
- r#"" it   	inner tag block"#
- r#"" ib   	inner block from `[(` to `])`"#
- r#"" i(¦) 	=`ib`"#
- r#"" iB   	inner Block from `[{` and `]}`"#
- r#"" i{¦} 	=`iB`"#
- r#"" i[   	inner `[]`  from `[` to matching `]`"#
- r#"" i]   	=`i[`"#
- r#"" i<   	inner `<>`  from `<` to matching `>`"#
- r#"" i>   	=`i<`"#
- r""
- r#"" includeTemplate (joinPath .cfg "nWindow.nv.tmpl") (dict "m" "normal" "i" "Ⓝ ☰🗔" "k" "C-w" "ksp" "" "cfg" .cfg) ›"#
- r""
- r""
let mapleader="<space>"
- r""
- r#""vnoremap	space            	cmd                   	Ⓝ Space mode	「 」   	「 」"#
(Ⓥ)"<space><space>" ":NvEnterNormalMode<CR>"
- r""
- r""
- r#"" includeTemplate (joinPath .cfg "nUnimpaired.nv.tmpl") (dict "m" "normal" "i" "Ⓝ" "k1" "[" "k0" "]" "cfg" .cfg) ›"#
- r#"" Major mode: Insert ⓘ"#
(ⓘ)"<M-j>" "<Down>"
(ⓘ)"<M-k>" "<Up>"
(ⓘ)"<M-j>" "<Down>"
(ⓘ)"<M-k>" "<Up>"
- r""
- r#"  " ⓘ     	line"#
(ⓘ)"<C-J>" ":SwapLineDown<CR>"
(ⓘ)"<C-K>" ":SwapLineUp<CR>"
(ⓘ)"<M-I>" ":SwapLineDown<CR>"
(ⓘ)"<M-O>" ":SwapLineUp<CR>"
- r""
- r#"""#
- r#"" Ⓢ Select Mode (Visual)"#
- r#"" x=Visual v=Vis+Sel xnoremap fails!!! maybe not implemented"#
(Ⓥ)i ":NvEnterInsertMode<CR>" defc="ITextObject"
(Ⓥ)c "YankSelectByChars" defk="y" defc="ChangeByChars"
(Ⓥ)"<S-down>" "MultipleCursorsAdd" defk="j" defc="MoveScreenDown"
(Ⓥ)"<S-up>" "MultipleCursorsRemove" defk="k" defc="MoveScreenUp"
(Ⓥ)"<S-left>" "MoveLeftByChars" defk="h" defc="MoveByWordsBackward"
(Ⓥ)"<S-right>" "MultipleCursorsSkip" defk="l" defc="MoveByWords"
(Ⓥ)J "MultipleCursorsAdd" defk="j" defc="JoinLines"
- r""
- r#"  "vnoremap <A-Z>	:DeselectLinesToFirst<CR>"#
- r#"  "      ,   	  'collapse_selection']  	                                               		#"#
- r""
- r""
- r"cnoremap <C-c> <C-y>"
- r""
- r#"" ☰🧩 Match Mode"#
- r#"" x=Visual v=Vis+Sel o=operator-pending"#
- r#"" xnoremap fails!!! maybe not implemented"#
- r#"" (+)  Surround current selection with <char>"#
(Ⓧ)ne "ATextObject" defk="a"
(Ⓧ)na "ITextObject" defk="i"
- r#""xnoremap e 	a"#
- r#""xnoremap a 	i"#
- r#""xnoremap aw	iw"#
- r#""xnoremap aW	iW"#
- r#""xnoremap as	is"#
- r#""xnoremap at	it"#
- r""
- r#""" ☰  Surround (github.com/tpope/vim-surround), add text object after a command, eg, niwd to insert () around (word)"#
(Ⓝ)nx "Surroundds" defk="ds"
(Ⓞ)nx "Surroundds" defk="ds"
(Ⓝ)nt "Surroundcs" defk="cs"
(Ⓞ)nt "Surroundcs" defk="cs"
(Ⓝ)ni "ysi"
(Ⓝ)no "ysa"
(Ⓝ)nl "Surroundyss" defk="yss"
(Ⓥ)ni "SubstituteByLines" defk="S"
- r#"" # 2.1 Text objects"#
- r#"" These can be used after an operator or in Visual mode to select an object"#
- r#"" # cmd		action in op-pending and Visual mode"#
- r#"" a'   	string in single quotes"#
- r#"" a"   	string in double quotes"#
- r#"" a``  	string in backticks"#
- r#"" aw   	a word                   	(with white space)"#
- r#"" aW   	`a WORD`                 	(with white space)"#
- r#"" as   	a sentence               	(with white space)"#
- r#"" ap   	a paragraph              	(with white space)"#
- r#"" at   	a tag block              	(with white space)"#
- r#"" ab   	a block from `[(` to `])`	(with braces)"#
- r#"" a(¦) 	=`ab`"#
- r#"" aB   	`a Block` from `[{` to `]}`	(with brackets)"#
- r#"" a{¦} 	=`aB`"#
- r#"" a[   	`a []`    from `[` to matching `]`"#
- r#"" a]   	=`a[`"#
- r#"" a<   	`a <>`    from `<` to matching `>`"#
- r#"" a>   	=`a<`"#
- r#"" i"   	string in double quotes without quotes"#
- r#"" i'   	string in single quotes without quotes"#
- r#"" i\`  	string in backticks     without backticks"#
- r#"" iw   	inner word"#
- r#"" iW   	inner WORD"#
- r#"" is   	inner sentence"#
- r#"" ip   	inner paragraph"#
- r#"" it   	inner tag block"#
- r#"" ib   	inner block from `[(` to `])`"#
- r#"" i(¦) 	=`ib`"#
- r#"" iB   	inner Block from `[{` and `]}`"#
- r#"" i{¦} 	=`iB`"#
- r#"" i[   	inner `[]`  from `[` to matching `]`"#
- r#"" i]   	=`i[`"#
- r#"" i<   	inner `<>`  from `<` to matching `>`"#
- r#"" i>   	=`i<`"#
- r#"" Multicursor match mode (inside select mode)"#
- r#"" use visual commands e.g. c, I, x, y work"#
(Ⓢ)e ":NvEnterNormalMode<CR>"
(Ⓢ)"<space>" ":NvEnterNormalMode<CR>"
- r#"" v=normal mode"#
- r#""×gH	Select all search occurrences (/ ? * #)"#
(Ⓜ)"<D-d>" "MultipleCursorsStart" defk="gh"
- r#"" gh      start Select mode"#
(Ⓢ)"<D-d>" "MultipleCursorsAdd" defk="j"
(Ⓢ)"<C-a>" "MultipleCursorsAddAll" defk="A"
(Ⓢ)l "MultipleCursorsRemove" defk="k" defc="MultipleCursorsSkip"
(Ⓢ)";" "MultipleCursorsSkip" defk="l"
(Ⓢ)h "MultipleCursorsRemove" defk="k"
(Ⓢ)"<C-a>" "MultipleCursorsAddAll" defk="A"
- r#"" start  <C-n> or gh     Start multiple cursor"#
- r#"" prev   <C-p> or k      Remove current match"#
- r#"" next   <C-n> or j      Add    next    match"#
- r#"" skip   <C-x> or l      Skip   next    match"#
- r#"" all    <M-n> or A      Select all     matches"#
- r""
- r""
set nowinaltkeys=null
set relativenumber=null
set relativenumber?=null

